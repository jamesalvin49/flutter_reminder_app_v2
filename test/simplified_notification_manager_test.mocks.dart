// Mocks generated by Mockito 5.4.4 from annotations
// in reminder_app_v2/test/simplified_notification_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reminder_app_v2/data/models/easter_date_calculator.dart' as _i6;
import 'package:reminder_app_v2/data/models/notification_settings_model.dart'
    as _i4;
import 'package:reminder_app_v2/data/repositories/notification_repository.dart'
    as _i5;
import 'package:reminder_app_v2/data/services/notification_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i2.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> scheduleNotification(
          _i4.NotificationSettingModel? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [setting],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> rescheduleAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #rescheduleAllNotifications,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i5.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> addNotificationSetting(
          _i4.NotificationSettingModel? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNotificationSetting,
          [setting],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<_i4.NotificationSettingModel?> getNotificationSetting(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationSetting,
          [id],
        ),
        returnValue: _i3.Future<_i4.NotificationSettingModel?>.value(),
      ) as _i3.Future<_i4.NotificationSettingModel?>);

  @override
  _i3.Future<bool> updateNotificationSetting(
          _i4.NotificationSettingModel? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotificationSetting,
          [setting],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteNotificationSetting(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotificationSetting,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.NotificationSettingModel>> getAllNotificationSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllNotificationSettings,
          [],
        ),
        returnValue: _i3.Future<List<_i4.NotificationSettingModel>>.value(
            <_i4.NotificationSettingModel>[]),
      ) as _i3.Future<List<_i4.NotificationSettingModel>>);

  @override
  _i3.Future<List<_i4.NotificationSettingModel>>
      getActiveNotificationSettings() => (super.noSuchMethod(
            Invocation.method(
              #getActiveNotificationSettings,
              [],
            ),
            returnValue: _i3.Future<List<_i4.NotificationSettingModel>>.value(
                <_i4.NotificationSettingModel>[]),
          ) as _i3.Future<List<_i4.NotificationSettingModel>>);

  @override
  _i3.Future<int> addEasterDate(_i6.EasterDateCalculator? easterDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEasterDate,
          [easterDate],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<_i6.EasterDateCalculator?> getEasterDateByYear(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEasterDateByYear,
          [year],
        ),
        returnValue: _i3.Future<_i6.EasterDateCalculator?>.value(),
      ) as _i3.Future<_i6.EasterDateCalculator?>);

  @override
  _i3.Future<bool> updateEasterDate(_i6.EasterDateCalculator? easterDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEasterDate,
          [easterDate],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteEasterDate(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteEasterDate,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i6.EasterDateCalculator>> getAllEasterDates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllEasterDates,
          [],
        ),
        returnValue: _i3.Future<List<_i6.EasterDateCalculator>>.value(
            <_i6.EasterDateCalculator>[]),
      ) as _i3.Future<List<_i6.EasterDateCalculator>>);

  @override
  _i3.Future<void> ensureEasterDatesForYearRange(
    int? startYear,
    int? endYear,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureEasterDatesForYearRange,
          [
            startYear,
            endYear,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAllNotificationSettings() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllNotificationSettings,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAllEasterDates() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllEasterDates,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
